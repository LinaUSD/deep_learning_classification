from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
# import metric
from keras.metrics import categorical_crossentropy
# optimization method
from keras.optimizers import SGD
import numpy as np



#------------- build VGG 16

def VGG16():
  # Initialize the model
  model = Sequential()

  # layer 1-2: 2 convolutional layers + 1 max-pooling layer
  model.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'same', activation = 'relu', input_shape = (224,224,3)))
  model.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'same', activation = 'relu'))
  model.add(MaxPooling2D(pool_size = (2,2), strides = 2))

  # number of filters and convolutions in each layer:
  filters_convs = [(128, 2), (256, 3), (512, 3), (512,3)]

  for n_filters, n_convs in filters_convs:
    for _ in np.arange(n_convs):
      model.add(Conv2D(filters = n_filters, kernel_size = (3,3), padding = 'same', activation = 'relu'))
    # max-pooling layer
    model.add(MaxPooling2D(pool_size = (2,2), strides = 2))

  model.add(Flatten())
  model.add(Dense(4096, activation = 'relu'))
  model.add(Dropout(0.5))
  model.add(Dense(4096, activation = 'relu'))
  model.add(Dropout(0.5))
  model.add(Dense(1000,activation = 'softmax'))

  # compile the model with a loss function, a metric and an optimization method
  opt = SGD(learning_rate= 0.01) # stochastic gradient descent method with learning rate lr = 0.01
  model.compile(loss = categorical_crossentropy,
                optimizer = opt,
                metrics = ['accuracy'])
  return model



vgg16_model2 = VGG16()
vgg16_model2.summary()

# Plot the VGG16 model
from keras.utils import plot_model
plot_model(vgg16_model)
